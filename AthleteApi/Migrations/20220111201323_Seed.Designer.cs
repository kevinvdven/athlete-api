// <auto-generated />
using System;
using AthleteApi;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AthleteApi.Migrations
{
    [DbContext(typeof(AthleteContext))]
    [Migration("20220111201323_Seed")]
    partial class Seed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AthleteApi.Models.Athlete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Athletes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1991, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Anna Gasser"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(2001, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tess Ledeux"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1990, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nairo Quintana"
                        });
                });

            modelBuilder.Entity("AthleteApi.Models.Championship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Championships");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "World Snowboard Tour",
                            Year = 2010
                        },
                        new
                        {
                            Id = 2,
                            Name = "World Snowboard Tour",
                            Year = 2011
                        },
                        new
                        {
                            Id = 3,
                            Name = "Winter Olympics",
                            Year = 2014
                        },
                        new
                        {
                            Id = 4,
                            Name = "FIS Snowboarding World Championship",
                            Year = 2015
                        },
                        new
                        {
                            Id = 5,
                            Name = "FIS Freestyle World Championship",
                            Year = 2017
                        },
                        new
                        {
                            Id = 6,
                            Name = "Route du Sud",
                            Year = 2012
                        },
                        new
                        {
                            Id = 7,
                            Name = "Tour of the Basque Country",
                            Year = 2013
                        },
                        new
                        {
                            Id = 8,
                            Name = "Tour de France",
                            Year = 2014
                        });
                });

            modelBuilder.Entity("AthleteApi.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("SkillName")
                        .HasColumnType("text");

                    b.Property<string>("SupersetName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SkillName = "Snowboarding",
                            SupersetName = "Winter sports"
                        },
                        new
                        {
                            Id = 2,
                            SkillName = "Gymnastics"
                        },
                        new
                        {
                            Id = 3,
                            SkillName = "Skiing",
                            SupersetName = "Winter sports"
                        },
                        new
                        {
                            Id = 4,
                            SkillName = "Cycling"
                        });
                });

            modelBuilder.Entity("AthleteChampionship", b =>
                {
                    b.Property<int>("AthletesId")
                        .HasColumnType("integer");

                    b.Property<int>("ChampionshipsId")
                        .HasColumnType("integer");

                    b.HasKey("AthletesId", "ChampionshipsId");

                    b.HasIndex("ChampionshipsId");

                    b.ToTable("AthleteChampionship");
                });

            modelBuilder.Entity("AthleteSkill", b =>
                {
                    b.Property<int>("AthletesId")
                        .HasColumnType("integer");

                    b.Property<int>("SkillsId")
                        .HasColumnType("integer");

                    b.HasKey("AthletesId", "SkillsId");

                    b.HasIndex("SkillsId");

                    b.ToTable("AthleteSkill");
                });

            modelBuilder.Entity("AthleteChampionship", b =>
                {
                    b.HasOne("AthleteApi.Models.Athlete", null)
                        .WithMany()
                        .HasForeignKey("AthletesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AthleteApi.Models.Championship", null)
                        .WithMany()
                        .HasForeignKey("ChampionshipsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AthleteSkill", b =>
                {
                    b.HasOne("AthleteApi.Models.Athlete", null)
                        .WithMany()
                        .HasForeignKey("AthletesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AthleteApi.Models.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
